{"status":"ok","feed":{"url":"https://medium.com/feed/@kanishkvarshney","title":"Stories by Kanishk Varshney on Medium","link":"https://medium.com/@kanishkvarshney?source=rss-f03eab685dc5------2","author":"","description":"Stories by Kanishk Varshney on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/1*SoC-X-P7bf2kTVlgvbW2tg.jpeg"},"items":[{"title":"Codyssey Unveiled: Embark on Your Journey to Coding Excellence","pubDate":"2024-01-17 16:00:47","link":"https://medium.com/codyssey/codyssey-unveiled-embark-on-your-journey-to-coding-excellence-597a854ec51b?source=rss-f03eab685dc5------2","guid":"https://medium.com/p/597a854ec51b","author":"Kanishk Varshney","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*NwgX-VsEzU5r-8YkzFhfZQ.png\"><figcaption>Codyssey: Your Coding\u00a0Odyssey</figcaption></figure><p>Welcome aboard Codyssey, your Intellectual adventure into the heart of coding mastery! Whether you\u2019re taking your first steps or already walking the expert\u2019s path, this series promises a treasure trove of insights and tools to elevate your coding prowess. Together, we\u2019ll delve into the vibrant world of programming, unravel the mysteries of competitive coding, and skillfully navigate through Python\u2019s solutions to the first five Leetcode challenges. Buckle up and brace for an exhilarating journey into the code verse, where each line of code brings us closer to greatness! \ud83d\ude80\ud83d\udc68\u200d\ud83d\udcbb\ud83d\udc69\u200d\ud83d\udcbb</p>\n<h3>Competitive Programming: Unleashing Your Coding\u00a0Prowess</h3>\n<p>Competitive programming: the digital dojo where your brain muscles lock in epic battles with algorithmic beasts. Leetcode, Codeforces, Topcoder\u2026 these arenas are where code warriors clash, wielding data structures and algorithms like enchanted blades. But beyond the competitive thrill, the real treasure lies in the forge: sharpened problem-solving skills, laser-focused algorithmic thinking, and code that dances with efficiency. From mastering recursion to conquering dynamic programming, you\u2019ll conquer diverse problem domains and emerge a coding samurai, ready to slay real-world challenges with elegance. So, polish your keyboard, sharpen your logic, and join the quest for coding\u00a0mastery!</p>\n<h4>\n<strong>Strategies</strong>:</h4>\n<ul>\n<li>\n<strong>Master the Foundations:</strong> Devour data structures and algorithms, your coding bedrock. Practice implementing them across languages, like Python. Conquer platforms like LeetCode.</li>\n<li>\n<strong>Sharpen Your Skills</strong>: Dive into practice problems, varying categories to expand your arsenal. Time yourself to boost efficiency.</li>\n<li>\n<strong>Learn from Every Solution:</strong> Analyze your code, seeking ways to optimize and evolve. Reflect on mistakes, then refactor for elegance.</li>\n<li>\n<strong>Test Yourself in Contests</strong>: Join coding battles like LeetCode contests, collaborate with fellow warriors, and rise from each challenge.</li>\n<li>\n<strong>Grow Together</strong>: Share your journey in online communities, contribute to open-source projects, and mentor others. Together, we code and\u00a0conquer!</li>\n</ul>\n<h3>Launching Codyssey: A Power-Up for Your Competitive Programming Journey</h3>\n<p>To complement and elevate your journey in competitive programming, we\u2019re thrilled to introduce Codyssey\u200a\u2014\u200aa dynamic initiative designed to synergize with the competitive coding landscape. Here\u2019s how Codyssey is set to revolutionize your coding experience:</p>\n<h4>Codyssey GitHub Repository: <a href=\"https://github.com/varskann/Codyssey\">Explore Codyssey on\u00a0GitHub</a>\n</h4>\n<ul>\n<li>Dive into a repository teeming with real-world coding challenges and solutions.</li>\n<li>Collaborate, share, and learn from a community passionate about coding excellence.</li>\n</ul>\n<h4>Codyssey Python Package: <a href=\"https://pypi.org/project/Codyssey/\">Get Codyssey on\u00a0PyPI</a>\n</h4>\n<ul>\n<li>Access a suite of Python tools specifically crafted for competitive coding.</li>\n<li>Enhance your problem-solving efficiency with our intuitive Python\u00a0package.</li>\n</ul>\n<p>Don\u2019t just read about it, experience it! Dive into the <a href=\"https://github.com/varskann/Codyssey\">Codyssey Github repo</a> and start mastering your coding skills\u00a0today.</p>\n<h3>Embarking on Codyssey: Conquering the First Five Leetcode Challenges in\u00a0Python</h3>\n<p>Embark on Codyssey\u2019s maiden journey: a thrilling adventure into Python programming, where we unravel the first five Leetcode challenges. This series is designed to build your skills, offering a hands-on approach to mastering key concepts and techniques. Together, we\u2019ll turn each problem into a learning milestone, paving your path toward competitive programming mastery. Let the coding odyssey\u00a0begin:</p>\n<ol>\n<li>\n<a href=\"https://leetcode.com/problems/two-sum/description/\"><strong>Two Sum</strong>:</a> Given an array of integer nums and an integer target, return indices of the two numbers such that they add up to the\u00a0target.</li>\n<li>\n<a href=\"https://leetcode.com/problems/add-two-numbers/\"><strong>Add Two Numbers</strong></a>: You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse<strong> </strong>order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked\u00a0list.</li>\n<li>\n<a href=\"https://leetcode.com/problems/longest-substring-without-repeating-characters/\"><strong>Longest Substring</strong></a>: Given a string s, find the length of the longest <br>substring without repeating characters</li>\n<li>\n<a href=\"https://leetcode.com/problems/median-of-two-sorted-arrays/\"><strong>Median of Sorted Arrays</strong>:</a> Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted\u00a0arrays</li>\n<li>\n<a href=\"https://leetcode.com/problems/longest-palindromic-substring/\"><strong>Longest Palindromic Substring</strong>:</a> Given a string s, return the longest <br>palindromic substring in\u00a0s.</li>\n</ol>\n<h3>Checkpoint</h3>\n<p>Level up complete! You\u2019ve just traversed the coding cosmos, cracked the secrets of competitive Python, and tamed the first five Leetcode beasts. But this is just the first checkpoint in your coding expedition. Remember, the path to coding mastery is paved with data structures &amp; algorithms, powered by practice, and fueled by a growth mindset. So, keep cranking out code, pushing boundaries, and basking in the glow of your digital creations. This is your invitation to code like a legend, and Codyssey is your ultimate guide to the code-o-sphere. Are you ready to level up\u00a0again?</p>\n<blockquote>In the realm of Python, where logic and art entwine, each line weaves a path to mastery, a dance of code\u00a0divine.</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=597a854ec51b\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/codyssey/codyssey-unveiled-embark-on-your-journey-to-coding-excellence-597a854ec51b\">Codyssey Unveiled: Embark on Your Journey to Coding Excellence</a> was originally published in <a href=\"https://medium.com/codyssey\">Codyssey</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*NwgX-VsEzU5r-8YkzFhfZQ.png\"><figcaption>Codyssey: Your Coding\u00a0Odyssey</figcaption></figure><p>Welcome aboard Codyssey, your Intellectual adventure into the heart of coding mastery! Whether you\u2019re taking your first steps or already walking the expert\u2019s path, this series promises a treasure trove of insights and tools to elevate your coding prowess. Together, we\u2019ll delve into the vibrant world of programming, unravel the mysteries of competitive coding, and skillfully navigate through Python\u2019s solutions to the first five Leetcode challenges. Buckle up and brace for an exhilarating journey into the code verse, where each line of code brings us closer to greatness! \ud83d\ude80\ud83d\udc68\u200d\ud83d\udcbb\ud83d\udc69\u200d\ud83d\udcbb</p>\n<h3>Competitive Programming: Unleashing Your Coding\u00a0Prowess</h3>\n<p>Competitive programming: the digital dojo where your brain muscles lock in epic battles with algorithmic beasts. Leetcode, Codeforces, Topcoder\u2026 these arenas are where code warriors clash, wielding data structures and algorithms like enchanted blades. But beyond the competitive thrill, the real treasure lies in the forge: sharpened problem-solving skills, laser-focused algorithmic thinking, and code that dances with efficiency. From mastering recursion to conquering dynamic programming, you\u2019ll conquer diverse problem domains and emerge a coding samurai, ready to slay real-world challenges with elegance. So, polish your keyboard, sharpen your logic, and join the quest for coding\u00a0mastery!</p>\n<h4>\n<strong>Strategies</strong>:</h4>\n<ul>\n<li>\n<strong>Master the Foundations:</strong> Devour data structures and algorithms, your coding bedrock. Practice implementing them across languages, like Python. Conquer platforms like LeetCode.</li>\n<li>\n<strong>Sharpen Your Skills</strong>: Dive into practice problems, varying categories to expand your arsenal. Time yourself to boost efficiency.</li>\n<li>\n<strong>Learn from Every Solution:</strong> Analyze your code, seeking ways to optimize and evolve. Reflect on mistakes, then refactor for elegance.</li>\n<li>\n<strong>Test Yourself in Contests</strong>: Join coding battles like LeetCode contests, collaborate with fellow warriors, and rise from each challenge.</li>\n<li>\n<strong>Grow Together</strong>: Share your journey in online communities, contribute to open-source projects, and mentor others. Together, we code and\u00a0conquer!</li>\n</ul>\n<h3>Launching Codyssey: A Power-Up for Your Competitive Programming Journey</h3>\n<p>To complement and elevate your journey in competitive programming, we\u2019re thrilled to introduce Codyssey\u200a\u2014\u200aa dynamic initiative designed to synergize with the competitive coding landscape. Here\u2019s how Codyssey is set to revolutionize your coding experience:</p>\n<h4>Codyssey GitHub Repository: <a href=\"https://github.com/varskann/Codyssey\">Explore Codyssey on\u00a0GitHub</a>\n</h4>\n<ul>\n<li>Dive into a repository teeming with real-world coding challenges and solutions.</li>\n<li>Collaborate, share, and learn from a community passionate about coding excellence.</li>\n</ul>\n<h4>Codyssey Python Package: <a href=\"https://pypi.org/project/Codyssey/\">Get Codyssey on\u00a0PyPI</a>\n</h4>\n<ul>\n<li>Access a suite of Python tools specifically crafted for competitive coding.</li>\n<li>Enhance your problem-solving efficiency with our intuitive Python\u00a0package.</li>\n</ul>\n<p>Don\u2019t just read about it, experience it! Dive into the <a href=\"https://github.com/varskann/Codyssey\">Codyssey Github repo</a> and start mastering your coding skills\u00a0today.</p>\n<h3>Embarking on Codyssey: Conquering the First Five Leetcode Challenges in\u00a0Python</h3>\n<p>Embark on Codyssey\u2019s maiden journey: a thrilling adventure into Python programming, where we unravel the first five Leetcode challenges. This series is designed to build your skills, offering a hands-on approach to mastering key concepts and techniques. Together, we\u2019ll turn each problem into a learning milestone, paving your path toward competitive programming mastery. Let the coding odyssey\u00a0begin:</p>\n<ol>\n<li>\n<a href=\"https://leetcode.com/problems/two-sum/description/\"><strong>Two Sum</strong>:</a> Given an array of integer nums and an integer target, return indices of the two numbers such that they add up to the\u00a0target.</li>\n<li>\n<a href=\"https://leetcode.com/problems/add-two-numbers/\"><strong>Add Two Numbers</strong></a>: You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse<strong> </strong>order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked\u00a0list.</li>\n<li>\n<a href=\"https://leetcode.com/problems/longest-substring-without-repeating-characters/\"><strong>Longest Substring</strong></a>: Given a string s, find the length of the longest <br>substring without repeating characters</li>\n<li>\n<a href=\"https://leetcode.com/problems/median-of-two-sorted-arrays/\"><strong>Median of Sorted Arrays</strong>:</a> Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted\u00a0arrays</li>\n<li>\n<a href=\"https://leetcode.com/problems/longest-palindromic-substring/\"><strong>Longest Palindromic Substring</strong>:</a> Given a string s, return the longest <br>palindromic substring in\u00a0s.</li>\n</ol>\n<h3>Checkpoint</h3>\n<p>Level up complete! You\u2019ve just traversed the coding cosmos, cracked the secrets of competitive Python, and tamed the first five Leetcode beasts. But this is just the first checkpoint in your coding expedition. Remember, the path to coding mastery is paved with data structures &amp; algorithms, powered by practice, and fueled by a growth mindset. So, keep cranking out code, pushing boundaries, and basking in the glow of your digital creations. This is your invitation to code like a legend, and Codyssey is your ultimate guide to the code-o-sphere. Are you ready to level up\u00a0again?</p>\n<blockquote>In the realm of Python, where logic and art entwine, each line weaves a path to mastery, a dance of code\u00a0divine.</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=597a854ec51b\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/codyssey/codyssey-unveiled-embark-on-your-journey-to-coding-excellence-597a854ec51b\">Codyssey Unveiled: Embark on Your Journey to Coding Excellence</a> was originally published in <a href=\"https://medium.com/codyssey\">Codyssey</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","enclosure":{},"categories":["technology","coding","python","education","programming"]},{"title":"Parallelization in Python","pubDate":"2022-11-27 19:25:42","link":"https://kanishkvarshney.medium.com/parallelization-in-python-32d2add653f?source=rss-f03eab685dc5------2","guid":"https://medium.com/p/32d2add653f","author":"Kanishk Varshney","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*tcOEiLmL9R8sKGXj\"><figcaption>Photo by <a href=\"https://unsplash.com/@hiteshchoudhary?utm_source=medium&amp;utm_medium=referral\">Hitesh Choudhary</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Recently, at my work, we were facing some slowdown in the production environment and I was put on the performance monitoring and optimization effort. I analyzed and benchmarked the algorithms, and figured that although the algorithms/libraries were optimized, the large number of inputs was becoming a bottleneck in the\u00a0system.</p>\n<p>Most of the code was either written as a simple <em>for loop</em>, or some services had a multiprocessing <em>map</em> method-based parallelization implementation. Ideally, this implementation should have taken worked well, but our processes were generating Image segmentation masks, and adding a blocking call wouldn\u2019t yield many gains in the performance on a large dataset. When I explored the multiprocessing module in Python, I came across the following methods available at my disposal:</p>\n<blockquote><em>apply()</em></blockquote>\n<blockquote><em>apply_async()</em></blockquote>\n<blockquote><em>map()</em></blockquote>\n<blockquote><em>map_async()</em></blockquote>\n<blockquote><em>imap()</em></blockquote>\n<blockquote><em>imap_unordered()</em></blockquote>\n<blockquote><em>starmap()</em></blockquote>\n<blockquote><em>starmap_async()</em></blockquote>\n<p>I skimmed through the <a href=\"https://docs.python.org/3/library/multiprocessing.html\">official documentation</a> but found it a bit too verbose and overwhelming. So, after spending some time on the net and writing some basic code to understand the different scenarios and behaviors of these\u00a0methods.</p>\n<p>In this article, I have put together a brief, and simple to grasp summary with basic code snippets to understand and choose the best possible method for your use case. For a better understanding, I will be using the following sample functions and calling them 1000 times to benchmark various implementations.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/568/1*QYl4ZOw8UhWOe13k1o4yMg.png\"><figcaption>Target Input Function | Single\u00a0Input</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/978/1*BXbLyXHUfDIX4Diydfojhg.png\"><figcaption>Target Input Function | Multiple\u00a0Inputs</figcaption></figure><blockquote>\n<strong>Food for thought</strong>: Notice the 0.1s sleep inside the fucntion, what will happen if we remove this\u00a0delay?</blockquote>\n<p>A typical, non-parallel loop-based implementation, will look as follows and takes ~1min 42sec to\u00a0finish</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*WeBu3zn9MA08v3H4rPDi1Q.png\"><figcaption>Loop-based Implementation</figcaption></figure><p>We will use this as a baseline and see various multiprocessing variants on a 12-core CPU (#\u00a0workers)</p>\n<h4><strong>map()</strong></h4>\n<p><em>map() </em>is the basic/standard parallel processing implementation for the job. It simply distributes the jobs amongst workers in a blocking\u00a0manner.</p>\n<blockquote>\n<strong>Note</strong>: Map() method works only for Single Argument functions. For multi-argument support, see starmap()</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*kafdkdTSVUcuFSdMYd7inQ.png\"><figcaption>Threadpool Map Implementation</figcaption></figure><p>Whoa! Run time reduced from 102 seconds to only 8.85 seconds (as expected ~102/12 cores).\u00a0QED!!</p>\n<h4><strong>map_async()</strong></h4>\n<p><em>map_async() </em>is the <strong>non-blocking</strong> version of the aforementioned <em>map()</em> method. Instead of returning the results directly, this will return a &lt;multiprocessing.pool.MapResult &gt;\u00a0object.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*zgF8jGLY0Z8Hw5qM6zZ0bQ.png\"><figcaption>Threadpool Map Async Implementation</figcaption></figure><p>You will have to fetch the result from the MapResult object.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Aro4qzxo0mF331lXorFPJw.png\"><figcaption>Threadpool Map Async Implementation: Wait</figcaption></figure><p>Fetching the results from the Map Async takes a similar time as Map. This is just a <strong><em>non-blocking</em></strong> version of the Threadpool Map and can be useful in places where you don\u2019t have to wait for the entire process to complete before completing other tasks. Just trigger and Map\u00a0Ahead.</p>\n<h4><strong>starmap()</strong></h4>\n<p>You would have noticed so far, and read above as well, <strong><em>map() </em></strong>method works with only single argument callables. If you want to parallelize the functions with multiple arguments, you will have to use <strong><em>starmap()</em></strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Jjh3NOWZuIojpBGBG3WTNg.png\"><figcaption>Threadpool StarMap Implementation</figcaption></figure><p>Whoa again! Same Speed up, but now with multiple arguments.</p>\n<h4>starmap_async()</h4>\n<p><em>starmap() </em>also comes with an asynchronous variant <strong><em>starmap_async()</em></strong><em>. </em>This works similarly to <em>map_async()</em>, but for multiple argument functions.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*U12Mmw_7szzRVlDZFiJHpQ.png\"><figcaption>Threadpool StarMap Async Implementation</figcaption></figure><h4>apply()</h4>\n<p><strong><em>apply()</em></strong> function is used to issue one-off tasks, and is called with the arguments list. This works similarly to calling a function directly and has been kept to maintain backward compatibility</p>\n<blockquote>func(*args, **kwargs) is preferred over apply(f,args,kwargs)</blockquote>\n<h4><strong>apply_async()</strong></h4>\n<p>This is an asynchronous variant of <strong><em>apply()</em></strong> but accepts only a single argument. This is more suited for performing tasks in parallel or when you don\u2019t need to wait for the output(e.g., function generating output files,\u00a0etc.)</p>\n<h4><strong>imap()</strong></h4>\n<p>Most of you might be familiar with the concept of generators in python. <strong><em>imap()</em></strong>, lazier version of <strong><em>map()</em></strong>, does just that. Instead of returning the result or MapResult object, it returns IMapIterator object, an iterator to the\u00a0results</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*XA2zkiSkgPVLoSg-SN-b_A.png\"><figcaption>Threadpool Imap Implementation</figcaption></figure><p>You can iterate over the results to get the final\u00a0output</p>\n<h4><strong>imap_unordered()</strong></h4>\n<p>Sometimes the order of results doesn\u2019t matter, and you would want to get the results in the order they get processed instead of the order in which the request is submitted. You can use <strong><em>imap_unordered() </em></strong>for such processes.</p>\n<h4>Summary</h4>\n<p>To re-iterate, the choice of function you would end up using will depend on your use case. You will have to consider multi-args, concurrency, blocking and\u00a0ordering</p>\n<p>You can also refer to the following explanations, to grasp the multiprocessing module:</p>\n<ul>\n<li><a href=\"https://superfastpython.com/multiprocessing-pool-python/\">https://superfastpython.com/multiprocessing-pool-python/</a></li>\n<li><a href=\"https://stackoverflow.com/questions/26520781/multiprocessing-pool-whats-the-difference-between-map-async-and-imap\">https://stackoverflow.com/questions/26520781/multiprocessing-pool-whats-the-difference-between-map-async-and-imap</a></li>\n</ul>\n<p>Thanks for following through, hope this small read helps you understand Python\u2019s multiprocessing module and utilize it properly.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=32d2add653f\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*tcOEiLmL9R8sKGXj\"><figcaption>Photo by <a href=\"https://unsplash.com/@hiteshchoudhary?utm_source=medium&amp;utm_medium=referral\">Hitesh Choudhary</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Recently, at my work, we were facing some slowdown in the production environment and I was put on the performance monitoring and optimization effort. I analyzed and benchmarked the algorithms, and figured that although the algorithms/libraries were optimized, the large number of inputs was becoming a bottleneck in the\u00a0system.</p>\n<p>Most of the code was either written as a simple <em>for loop</em>, or some services had a multiprocessing <em>map</em> method-based parallelization implementation. Ideally, this implementation should have taken worked well, but our processes were generating Image segmentation masks, and adding a blocking call wouldn\u2019t yield many gains in the performance on a large dataset. When I explored the multiprocessing module in Python, I came across the following methods available at my disposal:</p>\n<blockquote><em>apply()</em></blockquote>\n<blockquote><em>apply_async()</em></blockquote>\n<blockquote><em>map()</em></blockquote>\n<blockquote><em>map_async()</em></blockquote>\n<blockquote><em>imap()</em></blockquote>\n<blockquote><em>imap_unordered()</em></blockquote>\n<blockquote><em>starmap()</em></blockquote>\n<blockquote><em>starmap_async()</em></blockquote>\n<p>I skimmed through the <a href=\"https://docs.python.org/3/library/multiprocessing.html\">official documentation</a> but found it a bit too verbose and overwhelming. So, after spending some time on the net and writing some basic code to understand the different scenarios and behaviors of these\u00a0methods.</p>\n<p>In this article, I have put together a brief, and simple to grasp summary with basic code snippets to understand and choose the best possible method for your use case. For a better understanding, I will be using the following sample functions and calling them 1000 times to benchmark various implementations.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/568/1*QYl4ZOw8UhWOe13k1o4yMg.png\"><figcaption>Target Input Function | Single\u00a0Input</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/978/1*BXbLyXHUfDIX4Diydfojhg.png\"><figcaption>Target Input Function | Multiple\u00a0Inputs</figcaption></figure><blockquote>\n<strong>Food for thought</strong>: Notice the 0.1s sleep inside the fucntion, what will happen if we remove this\u00a0delay?</blockquote>\n<p>A typical, non-parallel loop-based implementation, will look as follows and takes ~1min 42sec to\u00a0finish</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*WeBu3zn9MA08v3H4rPDi1Q.png\"><figcaption>Loop-based Implementation</figcaption></figure><p>We will use this as a baseline and see various multiprocessing variants on a 12-core CPU (#\u00a0workers)</p>\n<h4><strong>map()</strong></h4>\n<p><em>map() </em>is the basic/standard parallel processing implementation for the job. It simply distributes the jobs amongst workers in a blocking\u00a0manner.</p>\n<blockquote>\n<strong>Note</strong>: Map() method works only for Single Argument functions. For multi-argument support, see starmap()</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*kafdkdTSVUcuFSdMYd7inQ.png\"><figcaption>Threadpool Map Implementation</figcaption></figure><p>Whoa! Run time reduced from 102 seconds to only 8.85 seconds (as expected ~102/12 cores).\u00a0QED!!</p>\n<h4><strong>map_async()</strong></h4>\n<p><em>map_async() </em>is the <strong>non-blocking</strong> version of the aforementioned <em>map()</em> method. Instead of returning the results directly, this will return a &lt;multiprocessing.pool.MapResult &gt;\u00a0object.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*zgF8jGLY0Z8Hw5qM6zZ0bQ.png\"><figcaption>Threadpool Map Async Implementation</figcaption></figure><p>You will have to fetch the result from the MapResult object.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Aro4qzxo0mF331lXorFPJw.png\"><figcaption>Threadpool Map Async Implementation: Wait</figcaption></figure><p>Fetching the results from the Map Async takes a similar time as Map. This is just a <strong><em>non-blocking</em></strong> version of the Threadpool Map and can be useful in places where you don\u2019t have to wait for the entire process to complete before completing other tasks. Just trigger and Map\u00a0Ahead.</p>\n<h4><strong>starmap()</strong></h4>\n<p>You would have noticed so far, and read above as well, <strong><em>map() </em></strong>method works with only single argument callables. If you want to parallelize the functions with multiple arguments, you will have to use <strong><em>starmap()</em></strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Jjh3NOWZuIojpBGBG3WTNg.png\"><figcaption>Threadpool StarMap Implementation</figcaption></figure><p>Whoa again! Same Speed up, but now with multiple arguments.</p>\n<h4>starmap_async()</h4>\n<p><em>starmap() </em>also comes with an asynchronous variant <strong><em>starmap_async()</em></strong><em>. </em>This works similarly to <em>map_async()</em>, but for multiple argument functions.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*U12Mmw_7szzRVlDZFiJHpQ.png\"><figcaption>Threadpool StarMap Async Implementation</figcaption></figure><h4>apply()</h4>\n<p><strong><em>apply()</em></strong> function is used to issue one-off tasks, and is called with the arguments list. This works similarly to calling a function directly and has been kept to maintain backward compatibility</p>\n<blockquote>func(*args, **kwargs) is preferred over apply(f,args,kwargs)</blockquote>\n<h4><strong>apply_async()</strong></h4>\n<p>This is an asynchronous variant of <strong><em>apply()</em></strong> but accepts only a single argument. This is more suited for performing tasks in parallel or when you don\u2019t need to wait for the output(e.g., function generating output files,\u00a0etc.)</p>\n<h4><strong>imap()</strong></h4>\n<p>Most of you might be familiar with the concept of generators in python. <strong><em>imap()</em></strong>, lazier version of <strong><em>map()</em></strong>, does just that. Instead of returning the result or MapResult object, it returns IMapIterator object, an iterator to the\u00a0results</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*XA2zkiSkgPVLoSg-SN-b_A.png\"><figcaption>Threadpool Imap Implementation</figcaption></figure><p>You can iterate over the results to get the final\u00a0output</p>\n<h4><strong>imap_unordered()</strong></h4>\n<p>Sometimes the order of results doesn\u2019t matter, and you would want to get the results in the order they get processed instead of the order in which the request is submitted. You can use <strong><em>imap_unordered() </em></strong>for such processes.</p>\n<h4>Summary</h4>\n<p>To re-iterate, the choice of function you would end up using will depend on your use case. You will have to consider multi-args, concurrency, blocking and\u00a0ordering</p>\n<p>You can also refer to the following explanations, to grasp the multiprocessing module:</p>\n<ul>\n<li><a href=\"https://superfastpython.com/multiprocessing-pool-python/\">https://superfastpython.com/multiprocessing-pool-python/</a></li>\n<li><a href=\"https://stackoverflow.com/questions/26520781/multiprocessing-pool-whats-the-difference-between-map-async-and-imap\">https://stackoverflow.com/questions/26520781/multiprocessing-pool-whats-the-difference-between-map-async-and-imap</a></li>\n</ul>\n<p>Thanks for following through, hope this small read helps you understand Python\u2019s multiprocessing module and utilize it properly.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=32d2add653f\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["python","asynchronous","code","multiprocessing","tutorial"]},{"title":"Geospatial Image Co-registration: Part-1","pubDate":"2022-05-11 08:10:18","link":"https://kanishkvarshney.medium.com/geospatial-image-co-registration-part-1-cfdc0f8f853d?source=rss-f03eab685dc5------2","guid":"https://medium.com/p/cfdc0f8f853d","author":"Kanishk Varshney","thumbnail":"","description":"\n<p>While working with geospatial data, the most generic use case a data scientist runs into is comparing or overlaying the recent rasters over the old or different source rasters. But, as luck may have it, not always these two different rasters will align. Apart from the color intensity (either due to sensor difference, or time difference) between the two rasters, one also encounters the spatial shift between the\u00a0two.</p>\n<p>This shift can be introduced due to several factors, including but not limited to, Sensor/Camera angle, the height of the camera, new constructions, geometry change, time of day, the time gap between two rasters,\u00a0etc.</p>\n<p>Spatial shift (upwards) between two rasters using the same camera 1 year\u00a0apart</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*HTIrky01KcUuCBtov9tmoQ.png\"><figcaption>Road shifted\u00a0upwards</figcaption></figure><p>To do any further analysis, e.g., depth map estimation, or change detection, it is advisable to first co-register the two\u00a0rasters</p>\n<p>Co-registering two rasters is a two-step\u00a0process:</p>\n<ol>\n<li>Finding common points between two rasters, called <em>tie\u00a0points</em>\n</li>\n<li>Calculate the Affine transformation on the target\u00a0raster</li>\n</ol>\n<h3><strong>Finding tie-points</strong></h3>\n<p>A tie point (TP) is a specific location that is recognizable visually in the overlap area between two or more\u00a0images</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/956/1*bDDWAvQPP_bTFkWltVYLCA.png\"><figcaption>Tie points</figcaption></figure><p>Detecting reliable tie points is typically a manual process of selecting visibly matching points between the two\u00a0rasters</p>\n<p>The tie-points should be uniformly distributed across the whole\u00a0raster</p>\n<h3><strong>Correcting Shifts</strong></h3>\n<p>Once you have the set of tie-points you can employ the following two strategies to correct the\u00a0shifts:</p>\n<ol>\n<li>\n<strong>Global Co-registration</strong>: Calculate the affine transform for the entire raster and apply homography correction based on the affine\u00a0matrix</li>\n<li>\n<strong>Local Co-registration</strong>: Calculate the shifts in a sliding window\u00a0manner.</li>\n</ol>\n<p>Once you have calculated the shifts, you can apply the affine transformation on the target rasters to correct the shifts. To achieve the aforementioned steps, you can use\u00a0GDAL</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*83CdcKaFLbXPnOpfwYCATw.png\"><figcaption>Correcting the upward\u00a0shift</figcaption></figure><h3><strong>Implementation</strong></h3>\n<p>You can use the GDAL library to achieve the aforementioned tasks:</p>\n<p>Calculate Spatial\u00a0Shifts:</p>\n<blockquote>gdal_translate -of GTiff -gcp pixel line easting northing \u201c&lt;path_to_input_target&gt;\u201d \u201c&lt;path_to_intermittent_output&gt;\u201d</blockquote>\n<p>Apply Affine transform:</p>\n<blockquote>gdalwarp -r near -tps -co COMPRESS=NONE -t_srs EPSG:4326 \u201c&lt;path_to_intermittent_output&gt;\u201d \u201c&lt;path_to_final_coregistred_output&gt;\u201d</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=cfdc0f8f853d\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>While working with geospatial data, the most generic use case a data scientist runs into is comparing or overlaying the recent rasters over the old or different source rasters. But, as luck may have it, not always these two different rasters will align. Apart from the color intensity (either due to sensor difference, or time difference) between the two rasters, one also encounters the spatial shift between the\u00a0two.</p>\n<p>This shift can be introduced due to several factors, including but not limited to, Sensor/Camera angle, the height of the camera, new constructions, geometry change, time of day, the time gap between two rasters,\u00a0etc.</p>\n<p>Spatial shift (upwards) between two rasters using the same camera 1 year\u00a0apart</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*HTIrky01KcUuCBtov9tmoQ.png\"><figcaption>Road shifted\u00a0upwards</figcaption></figure><p>To do any further analysis, e.g., depth map estimation, or change detection, it is advisable to first co-register the two\u00a0rasters</p>\n<p>Co-registering two rasters is a two-step\u00a0process:</p>\n<ol>\n<li>Finding common points between two rasters, called <em>tie\u00a0points</em>\n</li>\n<li>Calculate the Affine transformation on the target\u00a0raster</li>\n</ol>\n<h3><strong>Finding tie-points</strong></h3>\n<p>A tie point (TP) is a specific location that is recognizable visually in the overlap area between two or more\u00a0images</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/956/1*bDDWAvQPP_bTFkWltVYLCA.png\"><figcaption>Tie points</figcaption></figure><p>Detecting reliable tie points is typically a manual process of selecting visibly matching points between the two\u00a0rasters</p>\n<p>The tie-points should be uniformly distributed across the whole\u00a0raster</p>\n<h3><strong>Correcting Shifts</strong></h3>\n<p>Once you have the set of tie-points you can employ the following two strategies to correct the\u00a0shifts:</p>\n<ol>\n<li>\n<strong>Global Co-registration</strong>: Calculate the affine transform for the entire raster and apply homography correction based on the affine\u00a0matrix</li>\n<li>\n<strong>Local Co-registration</strong>: Calculate the shifts in a sliding window\u00a0manner.</li>\n</ol>\n<p>Once you have calculated the shifts, you can apply the affine transformation on the target rasters to correct the shifts. To achieve the aforementioned steps, you can use\u00a0GDAL</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*83CdcKaFLbXPnOpfwYCATw.png\"><figcaption>Correcting the upward\u00a0shift</figcaption></figure><h3><strong>Implementation</strong></h3>\n<p>You can use the GDAL library to achieve the aforementioned tasks:</p>\n<p>Calculate Spatial\u00a0Shifts:</p>\n<blockquote>gdal_translate -of GTiff -gcp pixel line easting northing \u201c&lt;path_to_input_target&gt;\u201d \u201c&lt;path_to_intermittent_output&gt;\u201d</blockquote>\n<p>Apply Affine transform:</p>\n<blockquote>gdalwarp -r near -tps -co COMPRESS=NONE -t_srs EPSG:4326 \u201c&lt;path_to_intermittent_output&gt;\u201d \u201c&lt;path_to_final_coregistred_output&gt;\u201d</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=cfdc0f8f853d\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["python","geospatial","image-processing"]},{"title":"Python Is Fun: Tricks of the Trade","pubDate":"2021-07-13 04:19:10","link":"https://kanishkvarshney.medium.com/fun-with-python-88d599ac07e1?source=rss-f03eab685dc5------2","guid":"https://medium.com/p/88d599ac07e1","author":"Kanishk Varshney","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*0sO3RXkzQRxIVcqP\"><figcaption>Photo by <a href=\"https://unsplash.com/@hiteshchoudhary?utm_source=medium&amp;utm_medium=referral\">Hitesh Choudhary</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Indisputably, Python is the most used language in modern programming community. Its intelligibility, robustness, and versatility makes it a great choice for beginners as well as experts. If you follow <a href=\"https://pypl.github.io/PYPL.html\">PYPL index</a>, as of July 2021, Python is way ahead in terms of popularity ( &gt;30% share from a plethora of languages). With over 1500 active contributors, the language provides some of the most interesting out-of-the-box tools for its community. In this blog, I will be introducing to three of my most favourite python tools that I frequently use in my development.</p>\n<h4>Type-hinting</h4>\n<p>For some of you this might be new, and many might be like what\u2019s new about this. As the name suggests, it provides a C/C++ like type definitions for the python variables etc. The syntax looks something like following:</p>\n<pre><strong>def</strong> greeting(name: str) -&gt; str:<br>    greet: str = 'Hello '<br><strong>return</strong> greet + name</pre>\n<p>And the fascinating part, you can use this to catch development time\u00a0errors.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*XbQObJXoqUwvqQJdBM-qoQ.png\"></figure><p>You can further enhance the type-hinting by using <a href=\"https://docs.python.org/3/library/typing.html\">typing</a> module to add more details to you\u00a0code.</p>\n<p>We just changed Python from being an interpreted language to compile language \ud83d\ude1c (just kidding, don\u2019t kick me for it! But this does help in writing <em>better</em><strong> </strong>quality\u00a0code)</p>\n<h4>Walrus Operator</h4>\n<p>Python3.8 came with a lot of new features, the most useful (and funny) one being the Walrus operator\u00a0<strong>:=</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*T-BXh0M8gJKz4SfNPNw_gg.png\"><figcaption>Walrus Non-Operator</figcaption></figure><p>Yes, your wild guess is correct. It is called <em>Walrus</em> because of this only (Walrist much?\u00a0\ud83e\udd37\u200d\u2642)</p>\n<p>This is a new type of assignment expression that allows you to assign and return a value in the same expression</p>\n<p>Assume your piece of\u00a0code:</p>\n<pre>def is_big_room(l, b):<br>  area = l*b<br>  if area &gt;= 10: <br>    big_room = True<br>  print(big_room)</pre>\n<p>can now simple be written\u00a0as:</p>\n<pre>def is_big_room(l, b):<br>  area = l*b<br>  print(big_room := area &gt;= 10) #Assigns True to big_room on the fly</pre>\n<p>If you are feeling a bit more geeky, go ahead and skim through the\u00a0<a href=\"https://www.python.org/dev/peps/pep-0572/\">PEP-0572</a></p>\n<h4><strong>Dunder Methods</strong></h4>\n<p>Saving the best for the last, Dunder or Magic methods. Dunder methods are special methods, preceded and succeeded by double underscores, that can override the functionality of build-in function or class\u00a0methods.</p>\n<blockquote>Fun fact: Everything in python is an object, so you can override the functionality of everything, in one way or\u00a0another</blockquote>\n<pre><strong>class </strong>Dunder:<br><strong>def </strong>__init__(self, name: str, age: int, height: float):<br>        self.name = name<br>        self.age = age<br>        self.height = height<br><br><strong>def </strong>__repr__(self):<br><strong>return f\"{</strong>self.name.capitalize()<strong>}, {</strong>self.age<strong>}\"<br><br>    def </strong>__len__(self):<br><strong>return </strong>self.height<br><br><br>dunder = Dunder(<strong>\"JohnDoe\"</strong>, 34, 178)<br>print(<strong>f\"Hi, I am {</strong>dunder<strong>}\"</strong>)<br>print(<strong>f\"My height?: {</strong>len(dunder)<strong>}\"</strong>)</pre>\n<p>Or, you can override the default list behaviours:</p>\n<pre><strong>class </strong>Liar(list):<br><strong>def </strong>__len__(self):<br><strong>return </strong>super().__len__() + 5<br><br><br>ll = Liar([1, 2, 3])<br>print(len(ll)) # prints 8</pre>\n<p>Hopefully, these tools will help you enrich your code as\u00a0well!</p>\n<p>Thank you folks! That was my time, you all have been a wonderful audience!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=88d599ac07e1\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*0sO3RXkzQRxIVcqP\"><figcaption>Photo by <a href=\"https://unsplash.com/@hiteshchoudhary?utm_source=medium&amp;utm_medium=referral\">Hitesh Choudhary</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Indisputably, Python is the most used language in modern programming community. Its intelligibility, robustness, and versatility makes it a great choice for beginners as well as experts. If you follow <a href=\"https://pypl.github.io/PYPL.html\">PYPL index</a>, as of July 2021, Python is way ahead in terms of popularity ( &gt;30% share from a plethora of languages). With over 1500 active contributors, the language provides some of the most interesting out-of-the-box tools for its community. In this blog, I will be introducing to three of my most favourite python tools that I frequently use in my development.</p>\n<h4>Type-hinting</h4>\n<p>For some of you this might be new, and many might be like what\u2019s new about this. As the name suggests, it provides a C/C++ like type definitions for the python variables etc. The syntax looks something like following:</p>\n<pre><strong>def</strong> greeting(name: str) -&gt; str:<br>    greet: str = 'Hello '<br><strong>return</strong> greet + name</pre>\n<p>And the fascinating part, you can use this to catch development time\u00a0errors.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*XbQObJXoqUwvqQJdBM-qoQ.png\"></figure><p>You can further enhance the type-hinting by using <a href=\"https://docs.python.org/3/library/typing.html\">typing</a> module to add more details to you\u00a0code.</p>\n<p>We just changed Python from being an interpreted language to compile language \ud83d\ude1c (just kidding, don\u2019t kick me for it! But this does help in writing <em>better</em><strong> </strong>quality\u00a0code)</p>\n<h4>Walrus Operator</h4>\n<p>Python3.8 came with a lot of new features, the most useful (and funny) one being the Walrus operator\u00a0<strong>:=</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*T-BXh0M8gJKz4SfNPNw_gg.png\"><figcaption>Walrus Non-Operator</figcaption></figure><p>Yes, your wild guess is correct. It is called <em>Walrus</em> because of this only (Walrist much?\u00a0\ud83e\udd37\u200d\u2642)</p>\n<p>This is a new type of assignment expression that allows you to assign and return a value in the same expression</p>\n<p>Assume your piece of\u00a0code:</p>\n<pre>def is_big_room(l, b):<br>  area = l*b<br>  if area &gt;= 10: <br>    big_room = True<br>  print(big_room)</pre>\n<p>can now simple be written\u00a0as:</p>\n<pre>def is_big_room(l, b):<br>  area = l*b<br>  print(big_room := area &gt;= 10) #Assigns True to big_room on the fly</pre>\n<p>If you are feeling a bit more geeky, go ahead and skim through the\u00a0<a href=\"https://www.python.org/dev/peps/pep-0572/\">PEP-0572</a></p>\n<h4><strong>Dunder Methods</strong></h4>\n<p>Saving the best for the last, Dunder or Magic methods. Dunder methods are special methods, preceded and succeeded by double underscores, that can override the functionality of build-in function or class\u00a0methods.</p>\n<blockquote>Fun fact: Everything in python is an object, so you can override the functionality of everything, in one way or\u00a0another</blockquote>\n<pre><strong>class </strong>Dunder:<br><strong>def </strong>__init__(self, name: str, age: int, height: float):<br>        self.name = name<br>        self.age = age<br>        self.height = height<br><br><strong>def </strong>__repr__(self):<br><strong>return f\"{</strong>self.name.capitalize()<strong>}, {</strong>self.age<strong>}\"<br><br>    def </strong>__len__(self):<br><strong>return </strong>self.height<br><br><br>dunder = Dunder(<strong>\"JohnDoe\"</strong>, 34, 178)<br>print(<strong>f\"Hi, I am {</strong>dunder<strong>}\"</strong>)<br>print(<strong>f\"My height?: {</strong>len(dunder)<strong>}\"</strong>)</pre>\n<p>Or, you can override the default list behaviours:</p>\n<pre><strong>class </strong>Liar(list):<br><strong>def </strong>__len__(self):<br><strong>return </strong>super().__len__() + 5<br><br><br>ll = Liar([1, 2, 3])<br>print(len(ll)) # prints 8</pre>\n<p>Hopefully, these tools will help you enrich your code as\u00a0well!</p>\n<p>Thank you folks! That was my time, you all have been a wonderful audience!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=88d599ac07e1\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["code","programming","python"]},{"title":"Python Documentation: Generating HTML using Sphinx","pubDate":"2021-06-18 21:10:33","link":"https://kanishkvarshney.medium.com/python-documentation-generating-html-using-sphinx-a0d909f5e963?source=rss-f03eab685dc5------2","guid":"https://medium.com/p/a0d909f5e963","author":"Kanishk Varshney","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*S6xPqDfdj1Y1BrTm\"><figcaption>Photo by <a href=\"https://unsplash.com/@sigmund?utm_source=medium&amp;utm_medium=referral\">Sigmund</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>This is part2 of the Python Documentation series. If you need help getting started with writing the documentation, you can take a look at\u00a0<a href=\"https://kanishkvarshney.medium.com/python-documentation-getting-started-141f077b1b92\">part1</a></p>\n<p>In this part, we will look at generating HTML files from the Python code docstrings. We will be using <a href=\"https://www.sphinx-doc.org/en/master/\">Sphinx</a> for that. You can install sphinx via\u00a0Pip</p>\n<pre>pip install sphinx</pre>\n<p>Sphinx typically works with ReStructured Text (.rst) files, but we can add support for Markdown(.md) files via\u00a0<em>m2r2</em></p>\n<pre>pip install m2r2</pre>\n<p>And we are done! Just kidding, but all that remains is updating few files and running few commands\u00a0\ud83d\ude0c</p>\n<blockquote>\n<strong>Note:</strong><em> Before generating docs, make sure that your codebase is a </em><a href=\"https://www.python-course.eu/python3_packages.php\"><em>package</em></a><em> (contains __init__.py at relevant locations)</em>\n</blockquote>\n<p>Create a folder to store your docs and quick start the sphinx-setup:</p>\n<pre>mkdir docs &amp;&amp; cd docs</pre>\n<pre><em>sphinx-quickstart -q -p \"&lt;Project&gt;\" -a \"&lt;Author&gt;\" -v \"&lt;Version&gt;\"</em>\u200b</pre>\n<p>You should see something similar to the following inside your <strong><em>docs</em></strong> directory:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/498/1*Fm01Q4wAzpw2fjXdWfeDuw.png\"><figcaption>Sphinx-quickstart initial structure</figcaption></figure><p>Next, we need to update the conf.py (primary control / config\u00a0file)</p>\n<ul><li>Uncomment and Update the paths to make out python package\u00a0visible</li></ul>\n<pre><strong>import </strong>os<br><strong>import </strong>sys<br>sys.path.insert(0, os.path.abspath(<strong>'.'</strong>))<br>sys.path.insert(0, os.path.abspath(<strong>'..'</strong>))</pre>\n<ul><li>Load sphinx extensions. You can read about the extensions in detail\u00a0<a href=\"https://www.sphinx-doc.org/en/master/usage/extensions/index.html\">here</a>\n</li></ul>\n<pre>extensions = [<br><strong>'sphinx.ext.napoleon'</strong>,      <em># Supports Google / Numpy docstring <br></em><strong>'sphinx.ext.autodoc'</strong>,       <em># Documentation from docstrings<br></em><strong>'sphinx.ext.doctest'</strong>,       <em># Test snippets in documentation<br></em><strong>'sphinx.ext.todo'</strong>,          <em># to-do syntax highlighting<br></em><strong>'sphinx.ext.ifconfig'</strong>,      <em># Content based configuration<br></em><strong>'m2r2'                      </strong><em># Markdown support <br></em>]</pre>\n<ul><li>Add supported file extensions for documentation</li></ul>\n<pre>source_suffix = [\u2018.rst\u2019, \u2018.md\u2019]</pre>\n<p>You can customise your conf.py upto any extent (changing theme, adding support for latex,\u00a0etc.</p>\n<p>Now, we are ready to generate our documentation. The final build commands looks for\u00a0.rst/.md files to generate html. Either you can manually write the files or use <em>sphinx-apidoc to automatically do it for\u00a0you.</em></p>\n<pre><em>sphinx-apidoc -f -o . ../</em>\u200b</pre>\n<p>To add rst / md files manually (readme, summary, etc), you can take help from <a href=\"https://www.sphinx-doc.org/en/master/usage/quickstart.html\">Sphinx</a> and <a href=\"https://docutils.sourceforge.io/rst.html\">ReStructured text</a> syntax\u00a0guides</p>\n<p>You will see new\u00a0.rst files, including a <em>modules.rst </em>inside your docs folder. We need to update this file inside our main <em>index.rst</em></p>\n<pre>Welcome to Projects's documentation!<br>====================================<br><br>.. <strong>toctree::<br>   :maxdepth:</strong> 2<br><strong>:caption:</strong> Contents:<br><br>   modules</pre>\n<p>To add\u00a0.md file, you will need to follow the syntax (instead of simply using\u00a0.rst file\u00a0name)</p>\n<pre>.. mdinclude:: ../README.md</pre>\n<p>Finally, we can build our rst / md\u00a0files</p>\n<pre>make<em> </em>html<em>\u200b</em></pre>\n<p>If all goes well, you will have html files generated inside <em>docs/_build/html/</em>\u200b</p>\n<blockquote>You can ignore some of the warnings, if they look irrelevant.</blockquote>\n<p>You can manually check the webpages by starting a python http server and redirect to the aforementioned directory in the browser (localhost:8000)</p>\n<pre><em>python \u2013m http.server</em>\u200b</pre>\n<p>You should be able to see some fancy website containing the documentation of your\u00a0module.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a0d909f5e963\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*S6xPqDfdj1Y1BrTm\"><figcaption>Photo by <a href=\"https://unsplash.com/@sigmund?utm_source=medium&amp;utm_medium=referral\">Sigmund</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>This is part2 of the Python Documentation series. If you need help getting started with writing the documentation, you can take a look at\u00a0<a href=\"https://kanishkvarshney.medium.com/python-documentation-getting-started-141f077b1b92\">part1</a></p>\n<p>In this part, we will look at generating HTML files from the Python code docstrings. We will be using <a href=\"https://www.sphinx-doc.org/en/master/\">Sphinx</a> for that. You can install sphinx via\u00a0Pip</p>\n<pre>pip install sphinx</pre>\n<p>Sphinx typically works with ReStructured Text (.rst) files, but we can add support for Markdown(.md) files via\u00a0<em>m2r2</em></p>\n<pre>pip install m2r2</pre>\n<p>And we are done! Just kidding, but all that remains is updating few files and running few commands\u00a0\ud83d\ude0c</p>\n<blockquote>\n<strong>Note:</strong><em> Before generating docs, make sure that your codebase is a </em><a href=\"https://www.python-course.eu/python3_packages.php\"><em>package</em></a><em> (contains __init__.py at relevant locations)</em>\n</blockquote>\n<p>Create a folder to store your docs and quick start the sphinx-setup:</p>\n<pre>mkdir docs &amp;&amp; cd docs</pre>\n<pre><em>sphinx-quickstart -q -p \"&lt;Project&gt;\" -a \"&lt;Author&gt;\" -v \"&lt;Version&gt;\"</em>\u200b</pre>\n<p>You should see something similar to the following inside your <strong><em>docs</em></strong> directory:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/498/1*Fm01Q4wAzpw2fjXdWfeDuw.png\"><figcaption>Sphinx-quickstart initial structure</figcaption></figure><p>Next, we need to update the conf.py (primary control / config\u00a0file)</p>\n<ul><li>Uncomment and Update the paths to make out python package\u00a0visible</li></ul>\n<pre><strong>import </strong>os<br><strong>import </strong>sys<br>sys.path.insert(0, os.path.abspath(<strong>'.'</strong>))<br>sys.path.insert(0, os.path.abspath(<strong>'..'</strong>))</pre>\n<ul><li>Load sphinx extensions. You can read about the extensions in detail\u00a0<a href=\"https://www.sphinx-doc.org/en/master/usage/extensions/index.html\">here</a>\n</li></ul>\n<pre>extensions = [<br><strong>'sphinx.ext.napoleon'</strong>,      <em># Supports Google / Numpy docstring <br></em><strong>'sphinx.ext.autodoc'</strong>,       <em># Documentation from docstrings<br></em><strong>'sphinx.ext.doctest'</strong>,       <em># Test snippets in documentation<br></em><strong>'sphinx.ext.todo'</strong>,          <em># to-do syntax highlighting<br></em><strong>'sphinx.ext.ifconfig'</strong>,      <em># Content based configuration<br></em><strong>'m2r2'                      </strong><em># Markdown support <br></em>]</pre>\n<ul><li>Add supported file extensions for documentation</li></ul>\n<pre>source_suffix = [\u2018.rst\u2019, \u2018.md\u2019]</pre>\n<p>You can customise your conf.py upto any extent (changing theme, adding support for latex,\u00a0etc.</p>\n<p>Now, we are ready to generate our documentation. The final build commands looks for\u00a0.rst/.md files to generate html. Either you can manually write the files or use <em>sphinx-apidoc to automatically do it for\u00a0you.</em></p>\n<pre><em>sphinx-apidoc -f -o . ../</em>\u200b</pre>\n<p>To add rst / md files manually (readme, summary, etc), you can take help from <a href=\"https://www.sphinx-doc.org/en/master/usage/quickstart.html\">Sphinx</a> and <a href=\"https://docutils.sourceforge.io/rst.html\">ReStructured text</a> syntax\u00a0guides</p>\n<p>You will see new\u00a0.rst files, including a <em>modules.rst </em>inside your docs folder. We need to update this file inside our main <em>index.rst</em></p>\n<pre>Welcome to Projects's documentation!<br>====================================<br><br>.. <strong>toctree::<br>   :maxdepth:</strong> 2<br><strong>:caption:</strong> Contents:<br><br>   modules</pre>\n<p>To add\u00a0.md file, you will need to follow the syntax (instead of simply using\u00a0.rst file\u00a0name)</p>\n<pre>.. mdinclude:: ../README.md</pre>\n<p>Finally, we can build our rst / md\u00a0files</p>\n<pre>make<em> </em>html<em>\u200b</em></pre>\n<p>If all goes well, you will have html files generated inside <em>docs/_build/html/</em>\u200b</p>\n<blockquote>You can ignore some of the warnings, if they look irrelevant.</blockquote>\n<p>You can manually check the webpages by starting a python http server and redirect to the aforementioned directory in the browser (localhost:8000)</p>\n<pre><em>python \u2013m http.server</em>\u200b</pre>\n<p>You should be able to see some fancy website containing the documentation of your\u00a0module.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a0d909f5e963\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["documentation","python","technology"]},{"title":"Python Documentation: Getting Started","pubDate":"2021-06-13 19:46:14","link":"https://kanishkvarshney.medium.com/python-documentation-getting-started-141f077b1b92?source=rss-f03eab685dc5------2","guid":"https://medium.com/p/141f077b1b92","author":"Kanishk Varshney","thumbnail":"","description":"\n<p>Many of us Pythonistas have wished to publish our own modules on Pip for everyone else to download and use. While writing the code/logic as python script is straightforward, the real hassle is actually formatting your code for publishing, adding documentation and publishing to PyPi and Documentation servers.</p>\n<p>In this will be a multi-series, I will try to collate all the tools / commands required enabling us to build and publish your packages. In first series, we will cover the documentation of the Python Modules: walking you through creating the documentation, generating HTML using Sphinx and hosting it at ReadTheDocs.</p>\n<p>Focusing on Documentation first rather than the module itself might sound weird, but \u2018 A good Python Module is unusable without a Great Documentation!\u2019. So hold on\u00a0tight\u2026</p>\n<h4>Creating the documentation</h4>\n<p>We will be using PyCharm to create our documentation. PyCharm provides a good integration to auto-generate the Docstring template for our functions, etc.</p>\n<p>First, we will need to setup our doc-string format. Goto PyCharm &gt; Preferences &gt; Tools &gt; Python Integrated Tools &gt; Docstrings</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*v6rKDdYaF65XMAWdfJDeCQ.png\"><figcaption>Setting up docstring format</figcaption></figure><p>I prefer Google Docstring format, you are free to choose anyone to your preference. You can get a brief idea about different formats\u00a0<a href=\"https://realpython.com/documenting-python-code/#docstring-formats\">here</a></p>\n<p>Now, you can start documenting your code. To document your function add a new line below your function start and enter triple quotes (\u201c\u201c\u201c\\n\u201d\u201d\u201d) and press enter. This will generate the template docstring for your\u00a0function</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/654/1*2DpHUW5M5kBPRUFkXNxiyQ.png\"><figcaption>Initialising docstring</figcaption></figure><p>All the docstrings should be added inside triple quotes and directly following the function / class / module start. Stick to this format, as in later parts we will be using these triple-quote docstrings to generate HTML / PDF documentation for our\u00a0module</p>\n<h4>Docstring guidelines</h4>\n<p>Although you are free to write whatever and however you want to, but following some general guidelines will help you develop detailed and consistent documentation for your\u00a0module:</p>\n<ul>\n<li>Brief one-liner description of the\u00a0function</li>\n<li>Detailed explanation of the algorithm</li>\n<li>Usage syntax and class parameters for the\u00a0classes</li>\n<li>Data types of the function parameters</li>\n<li>Exceptions and Return\u00a0values</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bx09Ga5bdhEzxml7DkvXhg.png\"><figcaption>Python Docstring Guidelines</figcaption></figure><p>The documentation build tools follow ReStructured Text syntax. You can add more details, code-blocks, TODO comments, Hyperlinks, etc. in your docstrings using the RST\u00a0syntax.</p>\n<p>One can also add some basic function syntax test using\u00a0<a href=\"https://docs.python.org/2/library/doctest.html\">doctest</a></p>\n<p>In next part, we will look at generating HTML files from our Docstrings using\u00a0Sphinx</p>\n<p>For more details and resources, you can go through following resources</p>\n<ul>\n<li><a href=\"https://thomas-cokelaer.info/tutorials/sphinx/rest_syntax.html\">https://thomas-cokelaer.info/tutorials/sphinx/rest_syntax.html</a></li>\n<li><a href=\"https://docs.python-guide.org/writing/documentation/\">https://docs.python-guide.org/writing/documentation/</a></li>\n<li><a href=\"https://www.python.org/dev/peps/pep-0257/\">https://www.python.org/dev/peps/pep-0257/</a></li>\n<li><a href=\"https://realpython.com/documenting-python-code/\">https://realpython.com/documenting-python-code/</a></li>\n<li><a href=\"https://docs.python.org/2/library/doctest.html\">https://docs.python.org/2/library/doctest.html</a></li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=141f077b1b92\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>Many of us Pythonistas have wished to publish our own modules on Pip for everyone else to download and use. While writing the code/logic as python script is straightforward, the real hassle is actually formatting your code for publishing, adding documentation and publishing to PyPi and Documentation servers.</p>\n<p>In this will be a multi-series, I will try to collate all the tools / commands required enabling us to build and publish your packages. In first series, we will cover the documentation of the Python Modules: walking you through creating the documentation, generating HTML using Sphinx and hosting it at ReadTheDocs.</p>\n<p>Focusing on Documentation first rather than the module itself might sound weird, but \u2018 A good Python Module is unusable without a Great Documentation!\u2019. So hold on\u00a0tight\u2026</p>\n<h4>Creating the documentation</h4>\n<p>We will be using PyCharm to create our documentation. PyCharm provides a good integration to auto-generate the Docstring template for our functions, etc.</p>\n<p>First, we will need to setup our doc-string format. Goto PyCharm &gt; Preferences &gt; Tools &gt; Python Integrated Tools &gt; Docstrings</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*v6rKDdYaF65XMAWdfJDeCQ.png\"><figcaption>Setting up docstring format</figcaption></figure><p>I prefer Google Docstring format, you are free to choose anyone to your preference. You can get a brief idea about different formats\u00a0<a href=\"https://realpython.com/documenting-python-code/#docstring-formats\">here</a></p>\n<p>Now, you can start documenting your code. To document your function add a new line below your function start and enter triple quotes (\u201c\u201c\u201c\\n\u201d\u201d\u201d) and press enter. This will generate the template docstring for your\u00a0function</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/654/1*2DpHUW5M5kBPRUFkXNxiyQ.png\"><figcaption>Initialising docstring</figcaption></figure><p>All the docstrings should be added inside triple quotes and directly following the function / class / module start. Stick to this format, as in later parts we will be using these triple-quote docstrings to generate HTML / PDF documentation for our\u00a0module</p>\n<h4>Docstring guidelines</h4>\n<p>Although you are free to write whatever and however you want to, but following some general guidelines will help you develop detailed and consistent documentation for your\u00a0module:</p>\n<ul>\n<li>Brief one-liner description of the\u00a0function</li>\n<li>Detailed explanation of the algorithm</li>\n<li>Usage syntax and class parameters for the\u00a0classes</li>\n<li>Data types of the function parameters</li>\n<li>Exceptions and Return\u00a0values</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bx09Ga5bdhEzxml7DkvXhg.png\"><figcaption>Python Docstring Guidelines</figcaption></figure><p>The documentation build tools follow ReStructured Text syntax. You can add more details, code-blocks, TODO comments, Hyperlinks, etc. in your docstrings using the RST\u00a0syntax.</p>\n<p>One can also add some basic function syntax test using\u00a0<a href=\"https://docs.python.org/2/library/doctest.html\">doctest</a></p>\n<p>In next part, we will look at generating HTML files from our Docstrings using\u00a0Sphinx</p>\n<p>For more details and resources, you can go through following resources</p>\n<ul>\n<li><a href=\"https://thomas-cokelaer.info/tutorials/sphinx/rest_syntax.html\">https://thomas-cokelaer.info/tutorials/sphinx/rest_syntax.html</a></li>\n<li><a href=\"https://docs.python-guide.org/writing/documentation/\">https://docs.python-guide.org/writing/documentation/</a></li>\n<li><a href=\"https://www.python.org/dev/peps/pep-0257/\">https://www.python.org/dev/peps/pep-0257/</a></li>\n<li><a href=\"https://realpython.com/documenting-python-code/\">https://realpython.com/documenting-python-code/</a></li>\n<li><a href=\"https://docs.python.org/2/library/doctest.html\">https://docs.python.org/2/library/doctest.html</a></li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=141f077b1b92\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["user-experience","code","pycharm","documentation","python"]},{"title":"Hosting your Flask Web Application on GoDaddy","pubDate":"2020-07-06 13:34:58","link":"https://kanishkvarshney.medium.com/hosting-your-flask-web-application-on-godaddy-5628a60e7151?source=rss-f03eab685dc5------2","guid":"https://medium.com/p/5628a60e7151","author":"Kanishk Varshney","thumbnail":"","description":"\n<h3>Hosting your Flask Website on\u00a0GoDaddy</h3>\n<h4>A step-by-step, and detailed, walkthrough to host your Flask(python) Website on\u00a0GoDaddy</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*viRs4bf-N1LdFE3G\"><figcaption>Photo by <a href=\"https://unsplash.com/@halacious?utm_source=medium&amp;utm_medium=referral\">Halacious</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Whenever someone wants to have their own website, they only think about funky animations and interactions. But once the exciting part of creating the web application in local environment is done, many of us have no clue how to make it available for the world to see. Since this isn\u2019t the fancy work, there aren\u2019t adequate comprehensive resources explaining the process. This blog will try to provide a step-by-step guide for this cumbersome but crucial\u00a0task.</p>\n<p>Although this tutorial is meant for <a href=\"https://flask.palletsprojects.com/en/1.1.x/\">flask </a>web applications, the procedure should be similar for Django or any other python based web framework</p>\n<blockquote>Since I have only tried with Flask, I can\u2019t guarantee other python frameworks will behave similarly. Above assumption is due to the procedure I followed didn\u2019t require any flask specific\u00a0work.</blockquote>\n<h4>Getting Started</h4>\n<p>Make sure you have following things up and ready before we start with the\u00a0hosting:</p>\n<ol>\n<li>\n<strong>Flask Application: </strong>Sounds obvious, but make sure the application is working in your local environment. Use <a href=\"https://pip.pypa.io/en/stable/\">Pip </a>as your package manager, since GoDaddy Hosting Space supports Pip installations by default. You can choose other package managers like Conda, Poetry, etc. but that will increase your manual workload. Create a <em>requirements.txt</em> list file of your python\u00a0packages</li>\n<li>\n<strong>GoDaddy Domain Name: </strong>This is the URL people will be visiting, make sure you have it up and running. You can just try to visit the URL, and confirm that you aren\u2019t running into Page Not Found\u00a0error</li>\n<li>\n<strong>Hosting Space: </strong>This is like a linux box on the GoDaddy Servers where you will be putting your code for your domain name to access. You will need to purchase a hosting plan(this is, and you can use external hosting spaces which suits your budget, experience, requirements, etc.<em> This guide only talks about GoDaddy Hosting Space on GoDaddy Domain Name</em>. I have a Starter Linux\u00a0pack:</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/601/1*r2wfcUJXoPS4MOB3XwFtXQ.png\"><figcaption>GoDaddy Starter Hosting\u00a0Plan</figcaption></figure><p>Once you are done, your <strong>My Products</strong> section should look something similar to the following and we can proceed with the\u00a0hosting</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*kwrML0lmm6y5RYorx4Q_NQ.png\"><figcaption>Domain name and Web Hosting space purchased</figcaption></figure><h3>Hosting the Application</h3>\n<p>Hosting your website is a two step\u00a0process:</p>\n<ul>\n<li>Syncing your code on the Hosting\u00a0Machine</li>\n<li>Creating a Web Application to Run your\u00a0code</li>\n</ul>\n<h4>Syncing Code on Hosting\u00a0Machine</h4>\n<p>To sync the code you will need to login into your hosting machine via ssh(use <a href=\"https://www.putty.org/\">Putty</a>, if you are on Windows). But before that you will have to <strong>enable SSH</strong> access for the server. You can do this by redirecting to:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*CVX2UFww86IqKrcW825meA.png\"><figcaption>Enabling SSH access on your\u00a0machine</figcaption></figure><p>My Products &gt; Web Hosting &gt; Manage &gt; Settings &gt; Server &gt; SSH access &gt;\u00a0Manage</p>\n<p>This takes about 24\u201348 hours to take effect. Hence, have a good day or two\u00a0;)</p>\n<p>One the SSH access in <strong>On</strong>, the IP address mentioned above will be your host address. You can find your credentials in the adjacent <strong>Access\u00a0</strong>tab</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*8x3bIgFPDaOHgy4iu8JLQw.png\"><figcaption>SSH login credentials</figcaption></figure><p><em>cPanel login </em>is your username and the folder path where you will be syncing your code once logged\u00a0in</p>\n<p>You might need to reset password and relogin on the dashboard for SSH to\u00a0work</p>\n<p>Remote machine supports Github and Python3 by default, if it isn\u2019t you might need to contact customer care to reset your machine (and redo the above\u00a0steps)</p>\n<p>Clone your repository to <strong>/home/&lt;username/ </strong>or if you prefer you can manually sync your code here using FTP / file transfer\u00a0tools.</p>\n<p>You can also use cPanel Admin (black button as shown above) &gt; Files &gt; File Manager for syncing your\u00a0code</p>\n<h4>Creating the Web Application</h4>\n<p>Once you are done with the code synving part, now it\u2019s time to finally create the server application. For this you will need to goto:<br>cPanel admin &gt; Software &gt; Setup Pytho\u00a0App</p>\n<p>Click on <strong>Create Application</strong>,<strong> </strong>it will redirect you to the following page</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*n9n4bjrWU59_OoVVnWPUfQ.png\"></figure><ul>\n<li>Select your python version from the drop down. If your version isn\u2019t mentioned you can install it by downloading/transfering the python installer in the Host Machine and restart the\u00a0machine.</li>\n<li>Give Application root same name as your code\u00a0folder</li>\n<li>Application URL should pick your domain name by\u00a0default</li>\n<li>Application startup file, is the entry point for your application that you use to run application in your development environment</li>\n<li>Application Entry Point, this file will be created by the cPanel. GoDaddy hosts python apps via wsgi, just put in an new python file name(you can just use wsgi.py).</li>\n<li>Passenger log file path is optional, but recommended.</li>\n<li>Under Configurations files, add your <em>requirements.txt </em>and trigger the <strong>Run pip install</strong>. This will install all the code dependencies.</li>\n</ul>\n<p>Now, click on the Create button near top right and\u00a0Voila!!!</p>\n<p>We are done and your website is out for the world to see. Have a good day ahead\u00a0!!!\u00a0:)</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=5628a60e7151\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<h3>Hosting your Flask Website on\u00a0GoDaddy</h3>\n<h4>A step-by-step, and detailed, walkthrough to host your Flask(python) Website on\u00a0GoDaddy</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*viRs4bf-N1LdFE3G\"><figcaption>Photo by <a href=\"https://unsplash.com/@halacious?utm_source=medium&amp;utm_medium=referral\">Halacious</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Whenever someone wants to have their own website, they only think about funky animations and interactions. But once the exciting part of creating the web application in local environment is done, many of us have no clue how to make it available for the world to see. Since this isn\u2019t the fancy work, there aren\u2019t adequate comprehensive resources explaining the process. This blog will try to provide a step-by-step guide for this cumbersome but crucial\u00a0task.</p>\n<p>Although this tutorial is meant for <a href=\"https://flask.palletsprojects.com/en/1.1.x/\">flask </a>web applications, the procedure should be similar for Django or any other python based web framework</p>\n<blockquote>Since I have only tried with Flask, I can\u2019t guarantee other python frameworks will behave similarly. Above assumption is due to the procedure I followed didn\u2019t require any flask specific\u00a0work.</blockquote>\n<h4>Getting Started</h4>\n<p>Make sure you have following things up and ready before we start with the\u00a0hosting:</p>\n<ol>\n<li>\n<strong>Flask Application: </strong>Sounds obvious, but make sure the application is working in your local environment. Use <a href=\"https://pip.pypa.io/en/stable/\">Pip </a>as your package manager, since GoDaddy Hosting Space supports Pip installations by default. You can choose other package managers like Conda, Poetry, etc. but that will increase your manual workload. Create a <em>requirements.txt</em> list file of your python\u00a0packages</li>\n<li>\n<strong>GoDaddy Domain Name: </strong>This is the URL people will be visiting, make sure you have it up and running. You can just try to visit the URL, and confirm that you aren\u2019t running into Page Not Found\u00a0error</li>\n<li>\n<strong>Hosting Space: </strong>This is like a linux box on the GoDaddy Servers where you will be putting your code for your domain name to access. You will need to purchase a hosting plan(this is, and you can use external hosting spaces which suits your budget, experience, requirements, etc.<em> This guide only talks about GoDaddy Hosting Space on GoDaddy Domain Name</em>. I have a Starter Linux\u00a0pack:</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/601/1*r2wfcUJXoPS4MOB3XwFtXQ.png\"><figcaption>GoDaddy Starter Hosting\u00a0Plan</figcaption></figure><p>Once you are done, your <strong>My Products</strong> section should look something similar to the following and we can proceed with the\u00a0hosting</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*kwrML0lmm6y5RYorx4Q_NQ.png\"><figcaption>Domain name and Web Hosting space purchased</figcaption></figure><h3>Hosting the Application</h3>\n<p>Hosting your website is a two step\u00a0process:</p>\n<ul>\n<li>Syncing your code on the Hosting\u00a0Machine</li>\n<li>Creating a Web Application to Run your\u00a0code</li>\n</ul>\n<h4>Syncing Code on Hosting\u00a0Machine</h4>\n<p>To sync the code you will need to login into your hosting machine via ssh(use <a href=\"https://www.putty.org/\">Putty</a>, if you are on Windows). But before that you will have to <strong>enable SSH</strong> access for the server. You can do this by redirecting to:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*CVX2UFww86IqKrcW825meA.png\"><figcaption>Enabling SSH access on your\u00a0machine</figcaption></figure><p>My Products &gt; Web Hosting &gt; Manage &gt; Settings &gt; Server &gt; SSH access &gt;\u00a0Manage</p>\n<p>This takes about 24\u201348 hours to take effect. Hence, have a good day or two\u00a0;)</p>\n<p>One the SSH access in <strong>On</strong>, the IP address mentioned above will be your host address. You can find your credentials in the adjacent <strong>Access\u00a0</strong>tab</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*8x3bIgFPDaOHgy4iu8JLQw.png\"><figcaption>SSH login credentials</figcaption></figure><p><em>cPanel login </em>is your username and the folder path where you will be syncing your code once logged\u00a0in</p>\n<p>You might need to reset password and relogin on the dashboard for SSH to\u00a0work</p>\n<p>Remote machine supports Github and Python3 by default, if it isn\u2019t you might need to contact customer care to reset your machine (and redo the above\u00a0steps)</p>\n<p>Clone your repository to <strong>/home/&lt;username/ </strong>or if you prefer you can manually sync your code here using FTP / file transfer\u00a0tools.</p>\n<p>You can also use cPanel Admin (black button as shown above) &gt; Files &gt; File Manager for syncing your\u00a0code</p>\n<h4>Creating the Web Application</h4>\n<p>Once you are done with the code synving part, now it\u2019s time to finally create the server application. For this you will need to goto:<br>cPanel admin &gt; Software &gt; Setup Pytho\u00a0App</p>\n<p>Click on <strong>Create Application</strong>,<strong> </strong>it will redirect you to the following page</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*n9n4bjrWU59_OoVVnWPUfQ.png\"></figure><ul>\n<li>Select your python version from the drop down. If your version isn\u2019t mentioned you can install it by downloading/transfering the python installer in the Host Machine and restart the\u00a0machine.</li>\n<li>Give Application root same name as your code\u00a0folder</li>\n<li>Application URL should pick your domain name by\u00a0default</li>\n<li>Application startup file, is the entry point for your application that you use to run application in your development environment</li>\n<li>Application Entry Point, this file will be created by the cPanel. GoDaddy hosts python apps via wsgi, just put in an new python file name(you can just use wsgi.py).</li>\n<li>Passenger log file path is optional, but recommended.</li>\n<li>Under Configurations files, add your <em>requirements.txt </em>and trigger the <strong>Run pip install</strong>. This will install all the code dependencies.</li>\n</ul>\n<p>Now, click on the Create button near top right and\u00a0Voila!!!</p>\n<p>We are done and your website is out for the world to see. Have a good day ahead\u00a0!!!\u00a0:)</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=5628a60e7151\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["flask","godaddy","hosting","python","web-development"]}]}